struct Position {
    x: Float,
    y: Float,
}

impl Position {
    fn new(x: Float, y: Float) -> Position {
        Position { x: x, y: y }
    }

    fn add_mut(mut self, other: Position) {
        self.x = self.x + other.x
        self.y = self.y + other.y
    }

    fn add(self, other: Position) -> Position {
        Position {
            x: self.x + other.x,
            y: self.y + other.y,
        }
    }

    fn mul(self, other: Position) -> Position {
        Position {
            x: self.x * other.x,
            y: self.y * other.y,
        }
    }

    fn scale(self, scalar: Float) -> Position {
        Position {
            x: self.x * scalar,
            y: self.y * scalar,
        }
    }

    fn sub(self, other: Position) -> Position {
        Position {
            x: self.x - other.x,
            y: self.y - other.y,
        }
    }

    fn magnitude(self) -> Float {
        tuple = (self.x, self.y)
        tuple.magnitude()
    }

    fn normalize(self) -> Position {
        tuple = (self.x, self.y)
        magnitude = tuple.magnitude()
        if magnitude < 0.005 {
            return Position { x: 0.0, y: 0.0 }
        }
        Position { x: self.x / magnitude, y: self.y / magnitude }
    }

    fn distance(self, other: Position) -> Float {
        x_diff = self.x - other.x
        y_diff = self.y - other.y

        tuple = (x_diff, y_diff)
        tuple.magnitude()
    }

    fn floor(self) -> (Int, Int) {
        (self.x.floor(), self.y.floor())
    }
}

struct Size {
    width: Float,
    height: Float,
}

struct Rect {
    pos: Position,
    size: Size,
}

impl Rect {
    fn new(pos: Position, size: Size) -> Rect {
        Rect { pos: pos, size: size }
    }

    fn intersects(self, other: Rect) -> Bool {
        self.pos.x < other.pos.x + other.size.width &&
        self.pos.x + self.size.width > other.pos.x &&
        self.pos.y < other.pos.y + other.size.height &&
        self.pos.y + self.size.height > other.pos.y
    }

    fn contains(self, other: Position) -> Bool {
        other.x >= self.pos.x &&
        other.x <= self.pos.x + self.size.width &&
        other.y >= self.pos.y &&
        other.y <= self.pos.y + self.size.height
    }

    fn contains_xy(self, x: Float, y: Float) -> Bool {
        x >= self.pos.x &&
        x <= self.pos.x + self.size.width &&
        y >= self.pos.y &&
        y <= self.pos.y + self.size.height
    }
}