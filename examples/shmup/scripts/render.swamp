/// Handles the rendering of the game
struct Render {
    player_ship_material: mangrove::render::FixedAtlasHandle,
}

impl Render {

    fn new(mut assets: mangrove::render::Assets) -> Render {
        cell_size = (16, 16)
        texture_size = (16*3, 16)
        player_ship_material = assets.frame_fixed_grid_material_png('player/ship_16x16', cell_size, texture_size)

        Render {
            player_ship_material: player_ship_material,
        }
    }

    /// Called by the mangrove engine every render tick
    fn render(self, logic: logic::Logic, mut gfx: mangrove::render::Gfx) {
        x = logic.x.floor()

        player_ship_pos = (x, 10, 0)
        sprite_size = (16, 16)

        ship_frame = match logic.direction.sign() {
            1.0 => 2,
            -1.0 => 0,
            _ => 1,
        }

        gfx.sprite_atlas_frame(player_ship_pos, self.player_ship_material, ship_frame)

        for shot in logic.shots {
            shot_pos = (shot.x.floor(), shot.y.floor(), 0)
            gfx.sprite_atlas_frame(shot_pos, self.player_ship_material, 1)
        }
    }

}

/// Called by the mangrove engine at startup
fn main(mut assets: mangrove::render::Assets) -> Render {
    Render::new(assets)
}
