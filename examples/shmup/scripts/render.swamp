use mangrove.render {
    SpriteParams,
    Color,
}

const SCREEN_HEIGHT = 180
const SCREEN_HEIGHT_F = 180.to_float()
const SCREEN_WIDTH = 320

/// Handles the rendering of the game
struct Render {
    player_ship_material: mangrove::render::FixedAtlasHandle,
    player_shot_material: mangrove::render::FixedAtlasHandle,
    alan_material: mangrove::render::FixedAtlasHandle,
    bon_bon_material: mangrove::render::FixedAtlasHandle,
    lips_material: mangrove::render::FixedAtlasHandle,
    bonus_pickup_material: mangrove::render::FixedAtlasHandle,
    explosion_material: mangrove::render::FixedAtlasHandle,
    background_material: mangrove::render::MaterialHandle,
    font_and_material: mangrove::render::FontAndMaterialHandle,
    tick: Int,
    background_x: Float,
}


impl Render {

    fn new(mut assets: mangrove::render::Assets) -> Render {
        const SIZE = 16
        const SHIP_TEXTURE_SIZE = (SIZE*3, SIZE)
        const CELL_SIZE = (SIZE, SIZE)

        player_ship_material = assets.frame_fixed_grid_material_png('player/ship_16x16', CELL_SIZE, SHIP_TEXTURE_SIZE)

        Render {
            player_ship_material: player_ship_material,
            player_shot_material: assets.frame_fixed_grid_material_png('projectiles/player_beam', (8,SIZE), (SIZE*2, SIZE)),
            alan_material: assets.frame_fixed_grid_material_png('enemies/alan_16x16', CELL_SIZE, (SIZE*6, SIZE)),
            bon_bon_material: assets.frame_fixed_grid_material_png('enemies/bon_bon_16x16', CELL_SIZE, (SIZE*4, SIZE)),
            lips_material: assets.frame_fixed_grid_material_png('enemies/lips_16x16', CELL_SIZE, (SIZE*5, SIZE)),
            bonus_pickup_material: assets.frame_fixed_grid_material_png('items/pickups_16x16', CELL_SIZE, (SIZE*3, SIZE)),
            explosion_material: assets.frame_fixed_grid_material_png('effects/explosion_16x16', CELL_SIZE, (SIZE*6, SIZE)),
            background_material: assets.material_png('blue_nebula_04-512x512'),
            font_and_material: assets.bm_font('font/hackman'),
            tick: 0,
            background_x: 0.0,
        }
    }

    fn fill_zeroes(s: String, len: Int) -> String {
        mut x = s
        while x.len() < len {
            x = "0" + x 
        }
        x
    }

    fn render_score_bonus(self, mut gfx: mangrove::render::Gfx, bonuses: std::Sparse<logic::ScoreBonus>) {
        for id, bonus in bonuses {
            score_string = Render::fill_zeroes('{bonus.score}', 2)

            y_offset = bonus.tick.to_float() / 2.0
            pos_3d = (bonus.pos.x.round(), bonus.pos.y.round() + y_offset.round(), 0)
            power = (20 - bonus.tick).max(0).to_float() / 30.0
            gfx.text(pos_3d, score_string, self.font_and_material, Color::new(0.5, 0.5, 1.0, power))
        }
    }

    /// Called by the mangrove engine every render tick
    fn render(mut self, logic: logic::Logic, mut gfx: mangrove::render::Gfx) {
        self.tick += 1
        x, y = logic.pos.floor()

        player_ship_pos = (x, y, 10)
        sprite_size = (16, 16)

        ship_frame = match logic.direction.sign() {
            1.0 => 0,
            -1.0 => 2,
            _ => 1,
        }

        self.background_x += 0.5
        self.background_x = self.background_x % 512.0

        score_string = Render::fill_zeroes('{logic.score}', 6)

        gfx.text((SCREEN_WIDTH-60, SCREEN_HEIGHT-30, 0), 'SCORE {score_string}', self.font_and_material, Color::new(1.0, 0.8, 1.0, 0.5))

        gfx.sprite_ex((0, 0, -100), self.background_material, SpriteParams {
            color: Color::new(1.0, 1.0, 1.0, 0.5),
            uv: (self.background_x.floor(), 0),
            ..
        })

        const STANDARD_ROTATE = 3

        const SHIP_SPRITE_PARAMS = SpriteParams {
            rotate: STANDARD_ROTATE,
            ..
        }

        gfx.sprite_atlas_frame_ex(player_ship_pos, self.player_ship_material, ship_frame, SHIP_SPRITE_PARAMS)

        self.render_score_bonus(gfx, logic.score_bonus)

        power = (self.tick % 10).to_float() / 10.0
        shot_sprite_params = SpriteParams {
            rotate: 3, // Rotation is counterclockwise
            color: Color::new(1.0, 1.0, 1.0, power),
            ..
        }

        // Render shots
        with shots = logic.shots, mut gfx, shot_sprite_params, mat=self.player_shot_material {
            for shot in shots {
                shot_pos = (shot.x.floor(), shot.y.floor(), 0)

                gfx.sprite_atlas_frame_ex(shot_pos, mat, 1, shot_sprite_params)
            }
        }

        // Render enemies
        with enemies=logic.enemies, mut gfx, self {
            for id, enemy in enemies {
                
                z = match enemy.enemy {
                    Alan => 1,
                    BonBon => 2,
                    Lips => 3,
                    }
                enemy_pos = (enemy.rect.pos.x.floor(), enemy.rect.pos.y.floor(), z)
                pulsating_time = enemy.time % 53
                frame = if pulsating_time < 40  pulsating_time/10  else  0 
                match enemy.enemy {
                    Alan => gfx.sprite_atlas_frame(enemy_pos, self.alan_material, frame),
                    BonBon => gfx.sprite_atlas_frame(enemy_pos, self.bon_bon_material, frame),
                    Lips => gfx.sprite_atlas_frame(enemy_pos, self.lips_material, frame),
                    _ => {},
                }
            }
        }

        // Render explosions
        with explosions=logic.explosions, mut gfx, mat=self.explosion_material  {
            for explosion in explosions {
                explosion_pos = (explosion.pos.x.floor() + 4, explosion.pos.y.floor(), 0)
                adjusted_time = explosion.tick / 3
                frame = 
                    | adjusted_time < 6 -> adjusted_time
                    | _ -> 5
                gfx.sprite_atlas_frame(explosion_pos, mat, frame)
            }
        }

        // Render bonus items
        with bonus_items = logic.bonus_items, mut gfx, mat = self.bonus_pickup_material {
            for bonus_item in bonus_items {
                bonus_pos = (bonus_item.pos.x.floor() + 4, bonus_item.pos.y.floor(), 0)
                frame = 0
                gfx.sprite_atlas_frame(bonus_pos, mat, frame)
            }
        }
    }
}

/// Called by the mangrove engine at startup
fn main(mut assets: mangrove::render::Assets) -> Render {
    Render::new(assets)
}
