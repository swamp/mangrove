/// Handles the rendering of the game
struct Render {
    player_ship_material: mangrove::render::FixedAtlasHandle,
    player_shot_material: mangrove::render::FixedAtlasHandle,
    alan_material: mangrove::render::FixedAtlasHandle,
    explosion_material: mangrove::render::FixedAtlasHandle,
    tick: Int,
}



impl Render {

    fn new(mut assets: mangrove::render::Assets) -> Render {
        cell_size = (16, 16)
        texture_size = (16*3, 16)
        player_ship_material = assets.frame_fixed_grid_material_png('player/ship_16x16', cell_size, texture_size)

        Render {
            player_ship_material: player_ship_material,
            player_shot_material: assets.frame_fixed_grid_material_png('projectiles/player_beam', (8,16), (16*2, 16)),
            alan_material: assets.frame_fixed_grid_material_png('enemies/alan_16x16', cell_size, (16*6, 16)),
            explosion_material: assets.frame_fixed_grid_material_png('effects/explosion_16x16', cell_size, (16*6, 16)),
            tick: 0,
        }
    }

    /// Called by the mangrove engine every render tick
    fn render(mut self, logic: logic::Logic, mut gfx: mangrove::render::Gfx) {
        self.tick += 1
        x, y = logic.pos.floor()

        player_ship_pos = (x, y, 0)
        sprite_size = (16, 16)

        ship_frame = match logic.direction.sign() {
            1.0 => 0,
            -1.0 => 2,
            _ => 1,
        }

        sprite_params = mangrove::render::SpriteParams {
            flip_x: false,
            flip_y: false,
            rotate: 3,
        }

        gfx.sprite_atlas_frame_ex(player_ship_pos, self.player_ship_material, ship_frame, sprite_params)

        for shot in logic.shots {
            shot_pos = (shot.x.floor(), shot.y.floor(), 0)

        shot_params = mangrove::render::SpriteParams {
            flip_x: false,
            flip_y: false,
            rotate: 3,
        }

            gfx.sprite_atlas_frame_ex(shot_pos, self.player_shot_material, 1, shot_params)
        }

        for enemy in logic.enemies {
            enemy_pos = (enemy.rect.pos.x.floor(), enemy.rect.pos.y.floor(), 0)
            match enemy.enemy {
                Alan => gfx.sprite_atlas_frame(enemy_pos, self.alan_material, self.tick / 5 % 6),
                _ => print('not handled enemy type: {enemy.enemy}'),
            }
        }

        for explosion in logic.explosions {
            explosion_pos = (explosion.pos.x.floor() + 4, explosion.pos.y.floor(), 0)
            mut frame = explosion.tick / 3
            if frame > 5 {
                frame = 5
            }
            gfx.sprite_atlas_frame(explosion_pos, self.explosion_material, frame)
        }
    }

}

/// Called by the mangrove engine at startup
fn main(mut assets: mangrove::render::Assets) -> Render {
    Render::new(assets)
}
