use mangrove.render {
    SpriteParams,
    Color,
}

const SCREEN_HEIGHT = 180
const SCREEN_HEIGHT_F = 180.to_float()
const SCREEN_WIDTH = 320
const SIZE = 16
const SHIP_TEXTURE_SIZE = (SIZE*3, SIZE)
const CELL_SIZE = (SIZE, SIZE)
const STANDARD_ROTATE = 3
const SHIP_SPRITE_PARAMS = SpriteParams {
    rotate: STANDARD_ROTATE,
    ..
}

/// Handles the rendering of the game
struct Render {
    player_ship_material: mangrove::render::FixedAtlasHandle,
    player_shot_material: mangrove::render::FixedAtlasHandle,
    alan_material: mangrove::render::FixedAtlasHandle,
    bon_bon_material: mangrove::render::FixedAtlasHandle,
    lips_material: mangrove::render::FixedAtlasHandle,
    bonus_pickup_material: mangrove::render::FixedAtlasHandle,
    boosters_material: mangrove::render::FixedAtlasHandle,
    explosion_material: mangrove::render::FixedAtlasHandle,
    background_material: mangrove::render::MaterialHandle,
    font_and_material: mangrove::render::FontAndMaterialHandle,
    tick: Int,
}

impl Render {

    fn new(mut assets: mangrove::render::Assets) -> Render {
        player_ship_material = assets.frame_fixed_grid_material_png('player/ship_16x16', CELL_SIZE, SHIP_TEXTURE_SIZE)

        Render {
            player_ship_material: player_ship_material,
            player_shot_material: assets.frame_fixed_grid_material_png('projectiles/player_beam', (8,SIZE), (SIZE*2, SIZE)),
            alan_material: assets.frame_fixed_grid_material_png('enemies/alan_16x16', CELL_SIZE, (SIZE*6, SIZE)),
            bon_bon_material: assets.frame_fixed_grid_material_png('enemies/bon_bon_16x16', CELL_SIZE, (SIZE*4, SIZE)),
            lips_material: assets.frame_fixed_grid_material_png('enemies/lips_16x16', CELL_SIZE, (SIZE*5, SIZE)),
            bonus_pickup_material: assets.frame_fixed_grid_material_png('items/pickups_16x16', CELL_SIZE, (SIZE*3, SIZE)),
            explosion_material: assets.frame_fixed_grid_material_png('effects/explosion_16x16', CELL_SIZE, (SIZE*6, SIZE)),
            boosters_material: assets.frame_fixed_grid_material_png('player/boosters_16x16', CELL_SIZE, (SIZE*2, SIZE)),
            background_material: assets.material_png('blue_nebula_04-512x512'),
            font_and_material: assets.bm_font('font/hackman'),
            tick: 0,
        }
    }

    fn fill_zeroes(s: String, len: Int) -> String {
        mut x = s
        while x.len() < len {
            x = "0" + x 
        }
        x
    }

    fn render_score_bonus(self, mut gfx: mangrove::render::Gfx, bonuses: std::Sparse<logic::ScoreBonus>) {
        for id, bonus in bonuses {
            score_string = Render::fill_zeroes('{bonus.score}', 2)

            y_offset = bonus.tick.to_float() / 2.0
            pos_3d = (bonus.pos.x.round(), bonus.pos.y.round() + y_offset.round(), 0)
            power = (20 - bonus.tick).max(0).to_float() / 30.0

            gfx.text(pos_3d, score_string, self.font_and_material, Color::new(0.5, 0.5, 1.0, power))
        }
    }

    fn render_ships(self, mut gfx: mangrove::render::Gfx, bonuses: std::Sparse<logic::Ship>) {
        for id, ship in bonuses {
            ship_pos = (ship.pos.x.floor(), ship.pos.y.floor(), 0)
            ship_frame = match ship.direction.y.sign() {
                1.0 => 0,
                -1.0 => 2,
                _ => 1,
            }
            gfx.sprite_atlas_frame_ex(ship_pos, self.player_ship_material, ship_frame, SHIP_SPRITE_PARAMS)

            normalized_x_movement = ship.direction.x.abs() / 0.6

            booster_value: Int? =
                | ship.direction.x > 0.6 -> 0
                | ship.direction.x > 0.0 -> 1
                | _ -> none

            // Render boosters
            if booster_value? {
                x, y = ship_pos
                adjusted_pos = (x - 15, y, 0)
                booster_sprite_params = SpriteParams {
                    rotate: 3, // Rotation is counterclockwise
                    color: Color::new(1.0, 1.0, 1.0, normalized_x_movement),
                    ..
                }
                gfx.sprite_atlas_frame_ex(adjusted_pos, self.boosters_material, booster_value, booster_sprite_params)
            }
        }
    }

    /// Called by the mangrove engine every render tick
    fn render(mut self, logic: logic::Logic, mut gfx: mangrove::render::Gfx) {
        self.tick += 1

        self.render_ships(gfx, logic.ships)
        // Render score
        with score=logic.score, mut gfx, font_mat=self.font_and_material {
            score_string = Render::fill_zeroes('{score}', 6)
            gfx.text((SCREEN_WIDTH-60, SCREEN_HEIGHT-30, 0), 'SCORE {score_string}', font_mat, Color::new(1.0, 0.8, 1.0, 0.5))
        }

        // Render scrolling background
        with tick_count=logic.tick_count, mut gfx, mat=self.background_material {
            background_x = (tick_count.to_float() * 0.5).floor() % 512

            gfx.sprite_ex((0, 0, -100), mat, SpriteParams {
                color: Color::new(1.0, 1.0, 1.0, 0.5),
                uv: (background_x, 0),
                ..
            })
        }

        self.render_score_bonus(gfx, logic.score_bonus)

        // Render shots
        with shots = logic.shots, mut gfx, mat=self.player_shot_material {
            for shot in shots {
                shot_pos = (shot.x.floor(), shot.y.floor(), 0)
                normalized = (shot.tick.to_float() / 3.0).sin() * 0.5 + 0.5
                shot_power = normalized * 0.8 + 0.2
                shot_sprite_params = SpriteParams {
                    rotate: 3, // Rotation is counterclockwise
                    color: Color::new(1.0, 1.0, 1.0, shot_power),
                    ..
                }

                gfx.sprite_atlas_frame_ex(shot_pos, mat, 1, shot_sprite_params)
            }
        }

        // Render enemies
        with enemies=logic.enemies, mut gfx, self {
            for id, enemy in enemies {
                z = match enemy.enemy {
                    Alan => 1,
                    BonBon => 2,
                    Lips => 3,
                    }
                enemy_pos = (enemy.rect.pos.x.floor(), enemy.rect.pos.y.floor(), z)
                pulsating_time = enemy.time % 53
                frame = if pulsating_time < 40  pulsating_time/10  else  0 
                match enemy.enemy {
                    Alan => gfx.sprite_atlas_frame(enemy_pos, self.alan_material, frame),
                    BonBon => gfx.sprite_atlas_frame(enemy_pos, self.bon_bon_material, frame),
                    Lips => gfx.sprite_atlas_frame(enemy_pos, self.lips_material, frame),
                    _ => {},
                }
            }
        }

        // Render explosions
        with explosions=logic.explosions, mut gfx, mat=self.explosion_material  {
            for explosion in explosions {
                explosion_pos = (explosion.pos.x.floor() + 4, explosion.pos.y.floor(), 0)
                adjusted_time = explosion.tick / 3
                // Explosion animation has 6 frames
                frame = 
                    | adjusted_time < 6 -> adjusted_time
                    | _ -> 5

                power = 1.0 - (explosion.tick.to_float() / 18.0).min(1.0)
                explosion_sprite_params = SpriteParams {
                    rotate: 3, // Rotation is counterclockwise
                    color: Color::new(1.0, 1.0, 1.0, power),
                    ..
                }                    
                gfx.sprite_atlas_frame_ex (   explosion_pos, mat, frame, explosion_sprite_params  )
            }
        }

        // Render bonus items
        with bonus_items = logic.bonus_items, mut gfx, mat = self.bonus_pickup_material {
            for bonus_item in bonus_items {
                pivot_x, pivot_y = (-3, -3) // bonus is a bit into the sprite frame
                bonus_pos = (bonus_item.pos.x.floor() + pivot_x, bonus_item.pos.y.floor() + pivot_y, -1)
                frame = 0
                gfx.sprite_atlas_frame(bonus_pos, mat, frame)
            }
        }
    }
}

/// Called by the mangrove engine at startup
fn main(mut assets: mangrove::render::Assets) -> Render {
    Render::new(assets)
}
