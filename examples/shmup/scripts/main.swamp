struct Logic {
    tick_count: Int, /// how many ticks have passed
    direction: Int, /// which direction the bats are moving
    x: Int, /// This is just to to move the bats back and forth
}

impl Logic {
    fn tick(mut self) {
        self.tick_count = self.tick_count + 1
        self.x = self.x + self.direction * 2

        if self.x > 200 {
            self.direction = -self.direction
            self.x = 200
        } else if self.x < 10 {
            self.direction = -self.direction
            self.x = 10
        }

        if self.tick_count % 60 == 0 {
            print('tick: {self.tick_count}')
        }
    }
}

/// Handles the rendering of the game
struct Render {
    player_ship_material: mangrove::MaterialHandle,
}

impl Render {
    fn new(mut assets: mangrove::Assets) -> Render {
        player_ship_material = assets.material_png('player/ship_16x16')

        Render {
            player_ship_material: player_ship_material,
        }
    }

    fn render(self, logic: Logic, mut gfx: mangrove::Gfx) {
        x = logic.x

        for i in 0..1 {
            player_ship_pos = (x + i * 32, 10 + (i % 6) * 30, 0)
            sprite_size = (46, 30)

            gfx.sprite(player_ship_pos, self.player_ship_material, sprite_size) // sprite_size should be optional in future versions
        }
    }
}

struct Audio {
}

impl Audio {
    fn audio(self, logic: Logic)  {
    }
}


fn main(mut assets: mangrove::Assets) -> (Logic, Render, Audio) {
    logic = Logic {
        tick_count: 0,
        direction: 1,
        x: 0,
    }

    render = Render::new(assets)

    audio = Audio {

    }

    (logic, render, audio)
}
