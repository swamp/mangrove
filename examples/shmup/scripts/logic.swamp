use gameplay { 
    some_utility_function, 
    Something,
}

use math {
    Rect,
    Position,
    Size,
}

const SCREEN_HEIGHT = 180
const SCREEN_HEIGHT_F = 180.to_float()
const SCREEN_WIDTH = 320
const SCREEN_WIDTH_F = 320.to_float()
const ENEMY_MARGIN = 20
const SHIP_Y_MARGIN = 20.0
const SHIP_X_MARGIN = 20.0
const MAGNITUDE = 8.0
const STARTING_POS = Position::new(20.0, 80.0)
const FIRE_COOLDOWN = 15

enum Faction {
    Player,
    Enemy,
}


enum ShotType {
    Tiny,
    Magentas,
}

struct Shot {
    x: Float,
    y: Float,
    direction: Position,
    tick: Int,
    faction: Faction,
    type: ShotType,
}


struct Player {
    fire: Bool,
    fire_cooldown: Int,
    assigned_ship_index: std::SparseId?,
    direction: Position,
}

struct Ship {
    rect: Rect,
    direction: Position,
}

enum EnemyType {
    Alan,
    BonBon,
    Lips,
}

struct Waypoints {
    points: [Position],
}

enum FormationMovement {
    Waypoints(Waypoints),
    Sine,
}

struct Formation {
    movement: FormationMovement,
}


struct Brain {
    time_until_attack: Int,
}



struct Enemy {
    rect: Rect,
    base_y: Float,
    direction: Float,
    enemy: EnemyType,
    formation: Int,
    time: Int,
    brain: Brain,
}

enum ExplosionType {
    Fire, // TODO: add more types
}

struct Explosion {
    pos: Position,
    tick: Int,
    type: ExplosionType,
}

struct ScoreBonus {
    pos: Position,
        tick: Int,
    score: Int,
}

struct BonusItem {
    pos: Position,
}

struct Logic {
    tick_count: Int, /// how many ticks have passed
    ships: std::Sparse<Ship>,
    shots: std::Sparse<Shot>,
    enemies: std::Sparse<Enemy>,
    explosions: std::Sparse<Explosion>,
    score_bonus: std::Sparse<ScoreBonus>,
    bonus_items: std::Sparse<BonusItem>,
    players: [Int: Player],
    formations: [Int: Formation],
    cooldown_settings: [Int], // just to test arrays
    score: Int,
    formation_id: Int,
    enemy_type: EnemyType,
    prng_x: Int,
}

struct Prnd

impl Prnd {
    fn random_range(value: Float, min: Int, max: Int) -> Int {
        min + (value.rnd() % (max - min))
    }

    fn random_range_int(value: Int, min: Int, max: Int) -> Int {
        min + (value.rnd() % (max - min + 1))
    }
}

impl Brain {
    fn think(mut self, rand_influence: Int) -> Bool {
        if self.time_until_attack > 0 {
            self.time_until_attack -= 1
            return false
        }

        self.time_until_attack = Prnd::random_range_int(rand_influence, 200, 400)
        true
    }
}

impl Logic {
    fn new() -> Logic {
        player = Player { 
            fire: false, 
            fire_cooldown: 0, 
            assigned_ship_index: none, 
            direction: Position { x: 0.0, y: 0.0 }
        }

        Logic {
            tick_count: 0,
            shots: std::Sparse<Shot>::new(),
            enemies: std::Sparse<Enemy>::new(),
            explosions: std::Sparse<Explosion>::new(),
            score_bonus: std::Sparse<ScoreBonus>::new(),
            bonus_items: std::Sparse<BonusItem>::new(),
            players: [ 0: player ],
            ships: std::Sparse<Ship>::new(),
            cooldown_settings: [ 10, FIRE_COOLDOWN, 30 ],
            formations: [],
            score: 0,
            formation_id: 0,
            enemy_type: EnemyType::Alan,
            prng_x: 0,
        }
    }


    fn has_enemies_in_formation(self, formation: Int) -> Bool {
        for enemy in self.enemies {
            if enemy.formation == formation {
                return true
            }
        }

        false
    }

    fn remove_enemy(mut self, id: std::SparseId) -> Bool {
        enemy = self.enemies[id]
        if enemy? {
            self.enemies.remove(id)

            if self.formations.has(enemy.formation) && !self.has_enemies_in_formation(enemy.formation) {
                self.formations.remove(enemy.formation)
                return true
            }
        }
        false
    }

    fn check_shots_vs_enemies(mut self) {
        for shot_id, shot in self.shots {
            if shot.faction != Faction::Player {
                continue
            }
            for enemy_id, enemy in self.enemies {
                shot_rect = Rect { pos: Position { x: shot.x, y: shot.y }, size: Size { width: 1.0, height: 2.0 } }
                if !enemy.rect.intersects(shot_rect) {
                    continue
                }
                self.shots.remove(shot_id)
                was_last_in_formation = self.remove_enemy(enemy_id)
                score_for_enemy = 10
                self.explosions.add(Explosion { pos: enemy.rect.pos, tick: 0, type: ExplosionType::Fire })
                self.score_bonus.add(ScoreBonus { pos: enemy.rect.pos, tick: 0, score: score_for_enemy })
                self.score += score_for_enemy
                if was_last_in_formation {
                    enemy_middle = enemy.rect.pos.add(Position { x: 4.0, y: 4.0 })
                    _ = self.bonus_items.add(BonusItem { pos: enemy_middle } )
                }
            }
        }
    }


    fn check_shots_vs_ships(mut self) {
        for shot_id, shot in self.shots {
            if shot.faction != Faction::Enemy {
                continue
            }
            for ship_id, ship in self.ships {
                shot_pos = Position { x: shot.x, y: shot.y }
                if ship.rect.pos.distance(shot_pos) > 8.0 {
                    continue
                }
                self.shots.remove(shot_id)
                self.ships.remove(ship_id)

                for mut player in self.players {
                    if found_index = player.assigned_ship_index? {
                        if found_index == ship_id {
                            player.assigned_ship_index = none
                            break
                        }
                    }
                }
                _ = self.explosions.add(Explosion { pos: ship.rect.pos, tick: 0, type: ExplosionType::Fire })
                break
            }
        }
    }

    fn check_bonus_vs_ships(mut self) {
        for bonus_item_id, bonus_item in self.bonus_items {
            bonus_item_rect = Rect { 
                pos: Position { x: bonus_item.pos.x, y: bonus_item.pos.y }, 
                size: Size { width: 10.0, height: 10.0 },
            }

            for ship in self.ships {
                ship_middle = Position { x: ship.rect.pos.x + 8.0, y: ship.rect.pos.y + 8.0 }
                bonus_middle = Position { x: bonus_item_rect.pos.x + 5.0, y: bonus_item_rect.pos.y + 5.0 }

                distance = bonus_middle.distance(ship_middle)

                if distance > 9.0 {
                    continue
                }

                self.score += 100
                self.score_bonus.add(ScoreBonus { pos: bonus_item.pos, tick: 0, score: 100 })
                self.bonus_items.remove(bonus_item_id)
            }
        }
    }

    fn tick_explosions(mut self) {
        for explosion_id, mut explosion in self.explosions {
            // This is just to show off the guard expression syntax
            | explosion.tick >= 30 -> {
                _ = self.explosions.remove(explosion_id)
                }
            | _ -> {
                explosion.tick += 1
                explosion.pos.x += 0.9
            }
        }
    }

    fn tick_score_bonus(mut self) {
        for bonus_id, mut bonus in self.score_bonus {
            // This is just to show that the scope is not needed for if statements
            // But it is strongly recommended with '{' '}' for easier reading
            if bonus.tick >= 30 
                self.score_bonus.remove(bonus_id)
             else {
                bonus.tick += 1
            }
        }
    }

    fn tick_bonus_items(mut self) {
        for bonus_id, mut bonus_item in self.bonus_items {
            if bonus_item.pos.x < -30.0 {
                self.bonus_items.remove(bonus_id)
            } else {
                bonus_item.pos.x -= 0.6
            }
        }
    }

    fn check_player_input(mut self) {
        for mut player in self.players {
            if player.fire && player.assigned_ship_index == none {
                ship2 = Ship {
                    rect: Rect {
                        pos: Position { x: 20.0, y: 80.0 },
                        size: Size { width: 16.0, height: 16.0 },
                    },
                    direction: Position { x: 0.0, y: 0.0 },
                }

                ship_id = self.ships.add(ship2) // BUG: Didn't check type
                player.assigned_ship_index = ship_id
                print('player assigned to ship: {ship_id}')
            }
            
            if ship_index = player.assigned_ship_index? {
                ship = self.ships[ship_index]
                if ship? {
                    if player.fire && player.fire_cooldown == 0 {
                        player.fire_cooldown = self.cooldown_settings[ 1 ]
                        _ = self.shots.add(Shot {
                            x: ship.rect.pos.x + 12.0, 
                            y: ship.rect.pos.y + 4.0,
                            direction: Position { x: 8.0, y: 0.0 },
                            tick: 0,
                            faction: Faction::Player,
                            type: ShotType::Tiny,
                        })
                    }
                }
            }
        }
    }

    fn closest_ship(self) -> Ship? {
        for ship in self.ships {
            return ship // HACK: just return the first ship
        }
        none
    }

    fn enemies_think(mut self) {
        for id, mut enemy in self.enemies {
            want_to_attack = enemy.brain.think(enemy.time + self.tick_count + self.prng_x) 
            if want_to_attack {
                target_ship = self.closest_ship() // BUG: didn't check return value
                if target_ship? {
                    direction_to_ship = target_ship.rect.pos.sub(enemy.rect.pos).normalize()
                    print('fire shot at ship {target_ship} direction:{direction_to_ship}!')
                    
                    initial_projectile_pos = enemy.rect.pos.add(direction_to_ship.scale(4.0))

                    _ = self.shots.add(Shot {
                            x: initial_projectile_pos.x, 
                            y: initial_projectile_pos.y,
                            direction: direction_to_ship.scale(1.5),
                            tick: 0,
                            faction: Faction::Enemy,
                            type: ShotType::Magentas,
                        })
                }
            }
        }
    }

    fn next_enemy_type(enemy_type: EnemyType) -> EnemyType {
        match enemy_type {
            Alan => EnemyType::BonBon,
            BonBon => EnemyType::Lips,
            Lips => EnemyType::Alan,
        }
    }

    fn next_formation_enemy_type(mut self) -> EnemyType {
        self.enemy_type = Logic::next_enemy_type(self.enemy_type)
        self.enemy_type
    }

    fn create_formation(mut self) {
        self.formation_id += 1
        self.formation_id %= 1024
        formation_id = self.formation_id

        enemy_type = self.next_formation_enemy_type()

        self.formations[formation_id] = Formation { movement: FormationMovement::Sine }

        count_in_formation = Prnd::random_range_int(self.prng_x + self.tick_count, 3, 5)

        for offset_index in 0..count_in_formation {
            random_y = Prnd::random_range_int(self.tick_count, ENEMY_MARGIN, SCREEN_HEIGHT - ENEMY_MARGIN)
            x_offset = offset_index * 32
            rect = Rect { 
                pos: Position { x: SCREEN_WIDTH.to_float() + 32.0 + x_offset.to_float(), y: random_y.to_float() }, 
                size: Size { width: 16.0, height: 16.0 } 
            }

            _ = self.enemies.add(Enemy {
                rect: rect, 
                base_y: rect.pos.y,
                enemy: enemy_type, 
                direction: -1.2,
                formation: formation_id,
                time: x_offset,
                brain: Brain { time_until_attack: Prnd::random_range_int(self.prng_x + self.tick_count + x_offset, 100, 500) },
            })
        }
    }

    fn players_fire_cooldown(mut self) {
        for mut player in self.players {
            if player.fire_cooldown > 0 {
                player.fire_cooldown -= 1
            }
        }
    }

    // This is not normally how you structure the code
    // it is just to test mut arguments
    fn change_cooldown_setting(mut settings: Int, v: Int) {
        settings = v
    }

    // This is not normally how you structure the code
    // it is just to test mut arguments
    fn move_in_y_with_direction(mut position: Position, direction: Float) { 
        position.y += direction // BUG: doesn't check mutability
        position.y = position.y.clamp(SHIP_Y_MARGIN, SCREEN_HEIGHT_F - SHIP_Y_MARGIN)
    }

    fn move_in_x_with_direction(mut position: Position, direction: Float) {
        position.x += direction * 1.3
        position.x = position.x.clamp(SHIP_X_MARGIN, SCREEN_WIDTH_F - SHIP_X_MARGIN)
    }

    fn move_ships(mut self) {
        for mut ship in self.ships {
            Logic::move_in_y_with_direction(mut ship.rect.pos, ship.direction.y) // Bug didn't check mutability
            Logic::move_in_x_with_direction(mut ship.rect.pos, ship.direction.x) // Bug didn't check mutability
            self.prng_x = ship.rect.pos.x.floor()
        }
    }

    fn player_input_to_ship_direction(mut self, player: Player) {
        if ship_index = player.assigned_ship_index? {
            mut ship = mut self.ships[ship_index]
            if ship? {
                ship.direction = player.direction
            } else {
                print('ship not found!!')
            }
        } else {
            print('ship not assigned yet, press fire to assign')
        }
    }

    /// Called by the mangrove engine every logic tick
    fn tick(mut self) {
        self.tick_count += 1


        // Input from players to ships
        for player in self.players {
            self.player_input_to_ship_direction(player)
        }

        self.move_ships()

        // print('cooldown: {cooldown ?? -1} is the value \n\xF0\x9F\x90\x8A\u(1F40A)NEXT LINE (🐊)')
    
        if self.tick_count % 257 == 0 {
            self.create_formation()
        }

        // Update enemies
        with mut self, mut enemies = self.enemies {
            for id, mut enemy in enemies {
                enemy.rect.pos.x += enemy.direction * 1.0
                enemy.time += 1
                sway_time = enemy.time.to_float() * 0.02
                sway_angle = sway_time * 6.28
                y = sway_angle.cos() * MAGNITUDE
                enemy.rect.pos.y = enemy.base_y + y

                if enemy.rect.pos.x < -32.0 {
                    self.formations.remove(enemy.formation) // if player missed this, then remove formation
                    self.remove_enemy(id)
                }
            }
        }

        // Update shots
        with mut shots = mut self.shots {
            screen_rect = Rect {
                pos: Position {
                    x: 0.0,
                    y: 0.0,
                },
                size: Size {
                    width: SCREEN_WIDTH_F,
                    height: SCREEN_HEIGHT_F,
                },
            }
            for shot_id, mut shot in shots {
                shot.x += shot.direction.x
                shot.y += shot.direction.y
                if !screen_rect.contains_xy(shot.x, shot.y) {
                    shots.remove(shot_id)
                }
                shot.tick += 1
            }
        }

        self.tick_explosions()
        self.tick_score_bonus()
        self.check_bonus_vs_ships()
        self.tick_bonus_items()
        self.enemies_think()
        self.check_shots_vs_enemies()
        self.check_shots_vs_ships()
        self.check_player_input()
        self.players_fire_cooldown()
    }

    fn set_player_input_fire(mut self, player_id: Int, fire: Bool) {
        self.players[player_id].fire = fire
        Logic::change_cooldown_setting(mut self.cooldown_settings[ 1 ], 20)
    }

    /// Called by the mangrove engine when a gamepad axis changes
    fn gamepad_axis_changed(mut self, player_id: Int, axis: input::Axis, value: Float) {
        mut player = mut self.players[player_id]
    
        if mut new_player = player? {
            match axis {
                LeftStickY => {
                    new_player.direction.y = value
                },
                LeftStickX => {
                    new_player.direction.x = value
                },
                _ => {},
            }
        }
    }

    fn some_guard() -> Bool {
        true
    }

    /// Called by the mangrove engine when a gamepad button changes
    fn gamepad_button_changed(mut self, player_id: Int, button: input::Button, value: Float) {
        match button {
            South | Logic::some_guard() && true => self.set_player_input_fire(player_id, value > 0.1),
            _ => {},
        }
    }
}


/// Called by the mangrove engine at startup
fn main() -> Logic {
    Logic::new()
}
