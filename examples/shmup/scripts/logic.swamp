use gameplay { 
    some_utility_function, 
    Something,
}

struct Shot {
    x: Float,
    y: Float,
}

struct Position {
    x: Float,
    y: Float,
}

impl Position {
    fn new(x: Float, y: Float) -> Position {
        Position { x: x, y: y }
    }

    fn add(mut self, other: Position) {
        self.x = self.x + other.x
        self.y = self.y + other.y
    }

    fn floor(self) -> (Int, Int) {
        (self.x.floor(), self.y.floor())
    }
}

struct Size {
    width: Float,
    height: Float,
}

struct Rect {
    pos: Position,
    size: Size,
}

impl Rect {
    fn new(pos: Position, size: Size) -> Rect {
        Rect { pos: pos, size: size }
    }

    fn intersects(self, other: Rect) -> Bool {
        self.pos.x < other.pos.x + other.size.width &&
        self.pos.x + self.size.width > other.pos.x &&
        self.pos.y < other.pos.y + other.size.height &&
        self.pos.y + self.size.height > other.pos.y
    }
}


struct Player {
    fire: Bool,
    fire_cooldown: Int,
}

enum EnemyType {
    Alan,
    BonBon,
    Lips,
}

struct Enemy {
    rect: Rect,
    direction: Float,
    enemy: EnemyType,
}

enum ExplosionType {
    Fire, // TODO: add more types
}

struct Explosion {
    pos: Position,
    tick: Int,
    type: ExplosionType,
}

struct Logic {
    tick_count: Int, /// how many ticks have passed
    direction: Float, /// which direction the player ship
    pos: Position, /// the position of the player ship
    shots: std::Sparse<Shot>,
    enemies: std::Sparse<Enemy>,
    explosions: std::Sparse<Explosion>,
    players: [Int: Player],
    cooldown_settings: [Int], // just to test arrays
    cooldown: Int?,
}

impl Logic {

    fn check_shots_vs_enemies(mut self) {
        for shot_id, shot in self.shots {
            for enemy_id, enemy in self.enemies {
                shot_rect = Rect { pos: Position { x: shot.x, y: shot.y }, size: Size { width: 1.0, height: 2.0 } }
                if !enemy.rect.intersects(shot_rect) {
                    continue
                }
                self.shots.remove(shot_id)
                self.enemies.remove(enemy_id)
                self.explosions.add(Explosion { pos: enemy.rect.pos, tick: 0, type: ExplosionType::Fire })
            }
        }
    }

    fn tick_explosions(mut self) {
        for explosion_id, mut explosion in self.explosions {
            // This is just to show that the scope is not needed for if statements
            // But it is strongly recommended with '{' '}' for easier reading
            if explosion.tick >= 30 
                self.explosions.remove(explosion_id)
             else 
                explosion.tick += 1
        }
    }

    fn check_player_input(mut self) {
        for mut player in self.players {
            if player.fire && player.fire_cooldown == 0 {
                self.shots.add(Shot {
                    x: self.pos.x + 12.0, 
                    y: self.pos.y + 4.0,
                })
                player.fire_cooldown = self.cooldown_settings[ 1 ]
                self.cooldown = player.fire_cooldown
            }
        }
    }

    fn players_fire_cooldown(mut self) {
        for mut player in self.players {
            if player.fire_cooldown > 0 {
                player.fire_cooldown -= 1
            } else {
                self.cooldown = none
            }
        }
    }

    // This is not normally how you structure the code
    // it is just to test mut arguments
    fn change_cooldown_setting(mut settings: Int, v: Int) {
        settings = v
    }

    // This is not normally how you structure the code
    // it is just to test mut arguments
    fn move_in_y_with_direction(mut position: Position, direction: Float) {
        position.y += direction
    }

    /// Called by the mangrove engine every logic tick
    fn tick(mut self) {
        self.tick_count += 1

        z = Something::new(5)
        a = some_utility_function(5)

        Logic::move_in_y_with_direction(mut self.pos, self.direction)

        if current_cooldown = self.cooldown? {
            print('cooldown is some: {current_cooldown} {self.cooldown}')
        }

        cooldown = self.cooldown
        if cooldown? {
            print('shadow cooldown is some: {cooldown} {self.cooldown}')
        }

        if self.tick_count % 30 == 0 {
            rect = Rect { 
                pos: Position { x: 220.0, y: 50.0 }, 
                size: Size { width: 16.0, height: 16.0 } 
            }
            
            self.enemies.add(Enemy {
                rect: rect, 
                enemy: EnemyType::Alan, 
                direction: -1.2 
            })

            // This is just to test for in maps
            for player_id, player in self.players {
                print('player {player_id} fire: {player.fire} cooldown: {player.fire_cooldown} {self.cooldown}')
            }
        }

        for id, mut enemy in self.enemies {
             enemy.rect.pos.x += enemy.direction
            if enemy.rect.pos.x < -10.0 {
                self.enemies.remove(id)
            }
        }

        for shot_id, mut shot in self.shots {
            shot.x = shot.x + 3.0
            if shot.x > 250.0 {
                self.shots.remove(shot_id)
            } 
        }

        self.tick_explosions()
        self.check_shots_vs_enemies()
        self.check_player_input()
        self.players_fire_cooldown()
    }

    fn set_player_input_fire(mut self, player_id: Int, fire: Bool) {
        self.players[player_id].fire = fire
        Logic::change_cooldown_setting(mut self.cooldown_settings[ 1 ], 20)
    }

    /// Called by the mangrove engine when a gamepad axis changes
    fn gamepad_axis_changed(mut self, player_id: Int, axis: input::Axis, value: Float) {
        match axis {
            LeftStickY => self.direction = value * 1.1,
            _ => {},
        }
    }

    /// Called by the mangrove engine when a gamepad button changes
    fn gamepad_button_changed(mut self, player_id: Int, button: input::Button, value: Float) {
        match button {
            South => self.set_player_input_fire(player_id, value > 0.5),
            _ => print('not handled button: {button} value: {value}'),
        }
    }

}

/// Called by the mangrove engine at startup
fn main() -> Logic {
    Logic {
        tick_count: 0,
        direction: 0.0,
        pos: Position::new(20.0, 80.0),
        shots: Sparse<Shot>::new(),
        enemies: Sparse<Enemy>::new(),
        explosions: Sparse<Explosion>::new(),
        players: [ 0: Player { fire: false, fire_cooldown: 0 } ],
        cooldown_settings: [ 10, 15, 30 ],
        cooldown: none,
    }
}
